const hre = require("hardhat");
const { AbiCoder } = hre.ethers;
const { getEASContract, getSchemaRegistryContract } = require("../utils/contracts.js");

const attest = async (recipient, vcHash) => {
    try {
        const ganacheProvider = new hre.ethers.JsonRpcProvider("http://127.0.0.1:7545");
        const wallet = new hre.ethers.Wallet(
            "0xc86fdc2ae87717a37b9321922100960055afb30d1c5f95dfd4a604c8d70e2a7b",
            ganacheProvider
        );

        console.log(`‚úÖ Usando cuenta para atestaci√≥n: ${wallet.address}`);

        // Obtener contrato EAS
        console.log("üîç Obteniendo contrato EAS...");
        const easContract = await getEASContract();

        // Obtener el UID del esquema (Aseg√∫rate de que este esquema existe en EAS)
        const schemaUID = `0xf2d4f367045fd1c6f233827aab4db9591f82413b5bbe530ff48f244fa53cf6c7`;

        // Validar que el esquema existe
        // console.log("üîç Validando esquema en el contrato...");
        // const schemaRegistryContract = await getSchemaRegistryContract();
        // const schemaRecord = await schemaRegistryContract.getSchema(schemaUID);

        // if (schemaRecord.uid === hre.ethers.ZeroAddress) {
        //     throw new Error("‚ùå El esquema no existe o no es v√°lido.");
        // }

        // console.log("‚úÖ Esquema v√°lido en el contrato.");

        // Codificar los datos de la atestaci√≥n
        const abiCoder = new AbiCoder();
        const encodedData = abiCoder.encode(
            ["string"], // Esquema: solo almacenamos el hash de la VC
            [vcHash] // Datos a atestar: Hash de la VC en IPFS
        );

        // Construir el objeto de Atestaci√≥n
        const attestationRequest = {
            schema: schemaUID,
            data: {
                recipient: recipient, // Direcci√≥n del destinatario
                expirationTime: 0, // No expira
                revocable: true, // Es revocable
                refUID: hre.ethers.ZeroHash, // Sin referencia previa
                data: encodedData, // Datos personalizados codificados
                value: 0, // Sin ETH asociado
            },
        };

        console.log("üìú Creando atestaci√≥n con los siguientes datos:", attestationRequest);

        // Llamar a la funci√≥n `attest`
        const tx = await easContract.connect(wallet).attest(attestationRequest);
        console.log("üöÄ Transacci√≥n enviada:", tx.hash);

        // Esperar confirmaci√≥n
        const receipt = await tx.wait();
        const attestationId = receipt.logs[0].data; // Obtener el UID de la atestaci√≥n

        console.log("‚úÖ Atestaci√≥n completada con √©xito. Attestation ID:", attestationId);

        return attestationId;

    } catch (error) {
        console.error("‚ùå Error al crear la atestaci√≥n:", error.message);
        throw new Error(error.message);
    }
};

module.exports = { attest };



0xD2a40b9263359A524650B3ef9e890a01125C16f4